// 002: Even Fibonacci numbers - Groovy
// https://projecteuler.net/problem=2
//
// Each new term in the Fibonacci sequence is generated by adding the previous
// two terms. By starting with 1 and 2, the first 10 terms will be:
//
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
// By considering the terms in the Fibonacci sequence whose values do not exceed
// four million, find the sum of the even-valued terms.

phi = (1+Math.sqrt(5))/2 // easier to remember than the decimal

def evenFibSum(max) {
    // Note: Phi (the golden ratio) is the limit of ratios between fibonacci
    // terms. The ratio between consecutive EVEN numbers is phi^3 (every 3rd
    // term is even), we exploit this to optimize the loop.
    def sum = 0
    def n = 2
    while (n < max) {
        sum += n
        n = Math.round(n*phi**3)
    }
    return sum
}

println evenFibSum(4e6)
